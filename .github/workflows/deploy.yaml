name: Build and Deploy in-store-app

on:
  push:
    branches:
      - production

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: jd-repo

jobs:
  # Step 1: Run tests
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          
      # Run client tests
      - name: Install Client Dependencies
        working-directory: ./client
        run: npm install
        
      - name: Run Client Tests
        working-directory: ./client
        run: npm test
        
      # Run server tests
      # - name: Install Server Dependencies
      #   working-directory: ./server
      #   run: npm install
        
      # - name: Run Server Tests
      #   working-directory: ./server
      #   env:
      #     NODE_ENV: test
      #   run: npm test

  # Step 2-8: Build and deploy
  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_mongodb_connection_string: ${{ secrets.MONGODB_CONNECTION_STRING }}
    steps:
      - uses: actions/checkout@v2

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      # Authenticate with ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      # Generate version number
      - name: Generate version number
        id: version
        run: echo "VERSION=$(date +'%Y%m%d')-${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Build and push images to ECR
      - name: Build and push nginx image
        uses: docker/build-push-action@v5
        with:
          context: ./nginx
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:in-store-app-nginx-${{ env.VERSION }}
          push: true

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: ./client
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:in-store-app-client-${{ env.VERSION }}
          push: true

      - name: Build and push api image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:in-store-app-api-${{ env.VERSION }}
          push: true
          
      # Deploy infrastructure with Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0
          
      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init
          
      - name: Terraform Plan
        working-directory: ./infrastructure
        env:
          TF_VAR_image_version: ${{ env.VERSION }}
        run: terraform plan -out=myplan.tfplan -var "image_version=${{ env.VERSION }}"

      - name: Terraform Apply
        working-directory: ./infrastructure
        env:
          TF_VAR_image_version: ${{ env.VERSION }}
        run: terraform apply myplan.tfplan
        