[defaults]                                          # Default configuration settings: (defaults is a section in the configuration file)
inventory = aws_ec2.yaml                            # Uses AWS EC2 dynamic inventory plugin
remote_user = ec2-user                              # Default SSH user for connections
private_key_file = ~/.ssh/in-store-app-key-pair.pem # SSH key for authentication
host_key_checking = False                           # Disables SSH host key verification - this is useful in dynamic cloud environments where instances are frequently created/destroyed, IP addresses get reused and prevents "REMOTE HOST IDENTIFICATION HAS CHANGED" errors. This is a common practice in automation scenarios to avoid manual intervention.
retry_files_enabled = False                         # Disables creation of retry files. Because by default Ansible creates retry files when playbook execution fails. Setting to "False" prevents creation of '.retry' files, keeps working directory clean and it's useful in CI/CD pipelines where retries are handled differently.

[privilege_escalation]  # Privilege escalation settings: (privilege_escalation is a section in the configuration file)
become = True           # Enables privilege escalation - this is required to execute commands with elevated privileges.
become_method = sudo    # Uses sudo for escalation (default method for privilege escalation in Linux).
become_user = root      # Escalates to root user - this is the user that Ansible will become after connecting to the remote host.
become_ask_pass = False # Don't prompt for sudo password - in here it's set to "False" because the sudo password is not required.

[ssh_connection]                                                                                            # SSH connection settings: (ssh_connection is a section in the configuration file)
ssh_args = -o ProxyCommand="ssh -W %h:%p -q ec2-user@18.133.173.104 -i ~/.ssh/in-store-app-key-pair.pem"    # In here I'm using ProxyCommand to connect to the bastion host (jump server) before connecting to the target host. This is useful in scenarios where the target host is not directly accessible from the Ansible control node. '-o' means option as is used to pass options to SSH. 'ProxyCommand' is used to specify the command to use to connect to the target host. 'ssh' is the command to connect to the target host. '-W' is used to specify the destination host and port to connect to. '%h' is the placeholder for the destination host and '%p' is the placeholder for the destination port. '-q' is used to suppress warning messages. 'ec2-user' is the SSH user for the bastion host. '-i' means identity file and is used to specify the path to the private key file used for authentication.
pipelining = True                                                                                           # Enables SSH pipelining for better performance - this is useful in scenarios where the target host has a slow connection. Pipelining reduces the number of SSH connections required to execute a playbook.
retries = 3                                                                                                 # Number of SSH connection retries.



# ------------------------- EXPLANATION ------------------------- #
# Ansible configuration file (ansible.cfg) is a settings file that controls Ansible's behavior. 
# Ansible configuration defines default parameter so I don't need to specify them in each playbook (reduces repetition, simplifies playbook maintenance and standardise configuration across teams).

# IMPORTANT NOTE about ProxyCommand: 
# Please note that the IP address is the bastion host IP address - this must be replaced whenever a new infrastructure is created/deployed!!!